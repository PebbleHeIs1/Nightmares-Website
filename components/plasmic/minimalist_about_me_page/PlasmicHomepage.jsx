// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4GFKm1JjDZWGyX7FsMAVce
// Component: jK7reGsVH7V3C
import * as React from "react";
import Head from "next/head";
import Link from "next/link";
import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import CopyableLink from "../../CopyableLink"; // plasmic-import: jyb-xE-cUhxSx/component
import Button from "../../Button"; // plasmic-import: r2g7-8qXxm_/component
import { useScreenVariants as useScreenVariantswdMl72S9OxtFq } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: wdML72S9OxtFQ/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_minimalist_about_me_page.module.css"; // plasmic-import: 4GFKm1JjDZWGyX7FsMAVce/projectcss
import sty from "./PlasmicHomepage.module.css"; // plasmic-import: jK7reGsVH7V3C/css

export const PlasmicHomepage__VariantProps = new Array();

export const PlasmicHomepage__ArgProps = new Array();

function PlasmicHomepage__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantswdMl72S9OxtFq()
  });

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <div className={classNames(projectcss.all, sty.freeBox__wntB0)}>
            <div className={classNames(projectcss.all, sty.freeBox__iiRDu)} />

            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox___5E9V)}
            >
              <div className={classNames(projectcss.all, sty.freeBox___2UJzt)}>
                <div className={classNames(projectcss.all, sty.freeBox__icDqB)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___01Kcg
                    )}
                  >
                    {hasVariant(globalVariants, "screen", "tabletOrSmaller")
                      ? "Nightmare"
                      : "Nightmare"}
                  </div>

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___67ZOn
                    )}
                  >
                    {"We have the best botnets, pBots, and others!"}
                  </div>
                </div>
              </div>

              <div className={classNames(projectcss.all, sty.freeBox__rtgAq)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__ycqcq
                  )}
                >
                  {" "}
                </div>

                <div className={classNames(projectcss.all, sty.freeBox__muLvN)}>
                  <CopyableLink
                    data-plasmic-name={"copyableLink"}
                    data-plasmic-override={overrides.copyableLink}
                    className={classNames("__wab_instance", sty.copyableLink)}
                  >
                    {"Email us at help@cracked4u.icu"}
                  </CopyableLink>

                  <Button
                    data-plasmic-name={"discord"}
                    data-plasmic-override={overrides.discord}
                    className={classNames("__wab_instance", sty.discord)}
                    link={"https://discord.gg/SsjePUu95x"}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__j7Vbo
                      )}
                    >
                      <React.Fragment>
                        <React.Fragment>{"Join Our Discord!"}</React.Fragment>
                        <p.PlasmicLink
                          data-plasmic-name={"link"}
                          data-plasmic-override={overrides.link}
                          className={classNames(
                            projectcss.all,
                            projectcss.a,
                            projectcss.__wab_text,
                            projectcss.plasmic_default__inline,
                            sty.link
                          )}
                          component={Link}
                          href={"https://discord.gg/SsjePUu95x"}
                          platform={"nextjs"}
                        >
                          {""}
                        </p.PlasmicLink>
                        <React.Fragment>{""}</React.Fragment>
                      </React.Fragment>
                    </div>
                  </Button>
                </div>
              </div>
            </p.Stack>

            <div className={classNames(projectcss.all, sty.freeBox__xzq6H)} />
          </div>
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: ["root", "copyableLink", "discord", "link"],
  copyableLink: ["copyableLink"],
  discord: ["discord", "link"],
  link: ["link"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicHomepage__ArgProps,
      internalVariantPropNames: PlasmicHomepage__VariantProps
    });

    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    copyableLink: makeNodeComponent("copyableLink"),
    discord: makeNodeComponent("discord"),
    link: makeNodeComponent("link"),
    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
